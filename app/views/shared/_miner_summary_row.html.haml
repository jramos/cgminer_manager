- if miner.available?
  - summary    = @miner_data[miner_index][:summary].first[:summary].first
  - devices    = @miner_data[miner_index][:devs].first[:devs]
  - pool_stats = @miner_data[miner_index][:stats].first[:stats].select{|stat| !!stat[:id].match('^POOL') }
  - pool_stats.each{|pool| @summary[:net_bytes_sent] << pool[:net_bytes_sent]; @summary[:net_bytes_recv] << pool[:net_bytes_recv];}

  - @summary[:ghs_5s]         << summary[:ghs_5s]
  - @summary[:ghs_avg]        << summary[:ghs_av]
  - @summary[:pool_stale]     << summary[:'pool_stale%']
  - @summary[:error_rate]     << summary[:'device_hardware%']
  - @summary[:rejected_rate]  << summary[:'device_rejected%']

  %tr(onclick="document.location='#{miner_url(miner_index)}';")
    %td= link_to miner.host + ':' + miner.port.to_s, miner_url(miner_index)
    %td.text-center= format_hashrate(summary[:ghs_5s] * 1e9)
    %td.text-center= format_hashrate(summary[:ghs_av] * 1e9)
    %td
      %table(cellpadding="0" cellspacing="0")
        %thead
          %th Name
          %th Status
          %th Elapsed
          %th C
          %th F
          %th Rejected
          %th Error
        %tbody
          - devices.each_with_index do |device, device_index|
            - @summary[:temperature]    << device[:temperature]
            - @summary[:uptime]         << device[:device_elapsed]
            - @summary[:total_mh]       << device[:total_mh]

            %tr.text-center
              %td= device[:name] + device_index.to_s

              - if device[:status] == 'Alive'
                %td.green.bold= device[:status]
              - else
                %td.red.bold= device[:status]

              %td= time_ago_in_words(Time.now - device[:device_elapsed])
              %td= raw(device[:temperature].to_s + '&deg;')
              %td= raw(to_ferinheight(device[:temperature]).to_s + '&deg;')
              %td= device[:'device_rejected%'].round(2).to_s + '%'
              %td= device[:'device_hardware%'].round(2).to_s + '%'

            - if chain_stats = get_stats_for(miner_index, device[:name]+device_index.to_s)
              - [:acs, :pga].each do |type|
                - 1.upto(4) do |i|
                  - status = chain_stats.send(:[], :"chain_#{type}#{i}") rescue nil
                  - next if status.nil? || status.try(:empty?)

                  %tr.text-center
                    %td= "#{type.to_s.upcase}#{(i - 1).to_s}"
                    %td(colspan="5")= raw(status.downcase.gsub('x', '<span class="red bold">x</span>'))
                    - error_rate = (1 - (status.downcase.count('o').to_f / status.gsub(' ','').length.to_f)) * 100
                    - if error_rate > 0
                      %td.red.bold= error_rate.round(2).to_s + '%'
                    - else
                      %td= error_rate.round(2).to_s + '%'
- else
  %tr
    %td= link_to miner.host + ':' + miner.port.to_s, miner_url(miner_index)
    %td.text-center= format_hashrate(0)
    %td.text-center= format_hashrate(0)
    %td.text-center
      %table(cellpadding="0" cellspacing="0")
        %thead
          %th Name
          %th Status
          %th Elapsed
          %th C
          %th F
          %th Rejected
          %th Error
        %tbody
          %tr
            %td &dash;
            %td.red.bold Unavailable
            %td &dash;
            %td &dash;
            %td &dash;
            %td &dash;
            %td &dash;
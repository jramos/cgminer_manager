#miner-pool
  %table(cellpadding="0" cellspacing="0")
    %thead
      %th Host
      %th Rate(5s)
      %th Rate(avg)
      %th Devices

    %tbody
      - @miner_pool.miners.each_with_index do |miner, index|
        - @summary[:ghs_5s] << miner.summary[:ghs_5s]
        - @summary[:ghs_avg] << miner.summary[:ghs_av]

        %tr(onclick="document.location='#{miner_url(index)}';")
          %td
            = link_to miner.host + ':' + miner.port.to_s, miner_url(index)
          %td.text-center= formatHashrate(miner.summary[:ghs_5s] * 1e9)
          %td.text-center= formatHashrate(miner.summary[:ghs_av] * 1e9)
          %td
            %table(cellpadding="0" cellspacing="0")
              %thead
                %th Name
                %th Status
                %th Elapsed
                %th C
                %th F
                %th Rejected
                %th Error
              %tbody
                - miner.devs.each_with_index do |device, index|
                  - @summary[:error_rate]     << device[:'device_hardware%']
                  - @summary[:rejected_rate]  << device[:'device_rejected%']
                  - @summary[:temperature]    << device[:temperature]
                  - @summary[:uptime]         << device[:device_elapsed]

                  %tr.text-center
                    %td= device[:name] + index.to_s
                    %td= device[:status]
                    %td= time_ago_in_words(Time.now - device[:device_elapsed])
                    %td= raw(device[:temperature].to_s + '&deg;')
                    %td= raw(toF(device[:temperature]).to_s + '&deg;')
                    %td= device[:'device_rejected%'].to_s + '%'
                    %td= device[:'device_hardware%'].to_s + '%'

                  - if chain_stats = get_chain_stats_for(miner, device[:name]+index.to_s)
                    - [:acs, :pga].each do |type|
                      - 1.upto(4) do |i|
                        - status = chain_stats.send(:[], :"chain_#{type}#{i}") rescue nil
                        - next if status.nil? || status.try(:empty?)

                        %tr.text-center
                          %td= "#{type.to_s.upcase}#{(i - 1).to_s}"
                          %td(colspan="5")= raw(status.downcase.gsub('x', '<span class="red bold">x</span>'))
                          %td= ((1.0 - (status.downcase.count('o').to_f / status.gsub(' ','').length.to_f)) * 100).to_s + '%'